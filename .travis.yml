language: node_js

node_js:
 - "8.9"

jobs:
  include:
    - stage: test-app-waf
      services:
        - postgresql
      install:
        - npm --prefix app/waf install
      before_script:
        - export PG_HOST=localhost
      script:
        - npm --prefix app/waf test
        - npm --prefix app/waf run coverage
        - npm --prefix app/waf run coveralls
      deploy:
        provider: script
        on:
          branch: master
        skip_cleanup: true
        script:
          - scripts/publish_api_ref.sh
    - stage: fvt
      services:
        - postgresql
      sudo: required
      install:
        - npm install -g newman newman-reporter-html
        - pushd test/vpn
        - ./vpn_install.sh
        - popd
      before_script:
        # Build ADCaaS image
        - pushd app/waf
        - docker build . -t f5devcentral/f5-openstack-services:adcaas-latest
        - popd
        # Import config values
        - for VAR in OS_AUTH_URL OS_PASSWORD BIGIQ_HOST BIGIQ_PORT BIGIQ_PASSWORD ; do
            TEST_VAR=TEST_$VAR ;
            sed -i "s/^$VAR=.*$/$VAR="$(echo ${!TEST_VAR} | sed 's/\//\\\//g')"/g" deploy/appcluster.rc ;
          done
        - sed -i "s/ENABLE_EFK=true/ENABLE_EFK=false/g" deploy/appcluster.rc
        - sed -i "s/DATABASE_HOST=postgres-server/DATABASE_HOST=localhost/g" deploy/appcluster.rc
        - sed -i "s/ASG_HOST=asg-server/ASG_HOST=localhost/g" deploy/appcluster.rc
        - cat deploy/appcluster.rc
        # Start ADCaaS
        - pushd scripts
        - ./start_all.sh
        - popd
        # Connect to lab VPN
        - pushd test/vpn
        - ./vpn_connect.sh
        - popd
      script:
        - pushd test
        - ./test_all.sh & > /dev/null
        - popd
        - docker logs -f ADCAAS
    - stage: publish-image-and-docs
      language: python
      sudo: required
      services:
        - postgresql
      before_install:
        - docker pull f5devcentral/containthedocs:latest
      install:
        - pip install awscli --upgrade
      script:
        # Rebuild document
        - pushd docs
        - ./docker-docs.sh ./test-docs.sh
        - popd
      deploy:
      # Deploy image to Docker Hub
      - provider: script
        script: scripts/publish_image.sh
        on:
          tags: true
      # DEPLOY DOCS TO STAGING
      - provider: s3
        skip_cleanup: true
        access_key_id: $AWS_ACCESS_KEY_ID
        secret_access_key: $AWS_SECRET_ACCESS_KEY
        bucket: $AWS_S3_STAGING
        local_dir: docs/_build/html
        upload_dir: $AWS_DIR
        on:
          branch: master
          repo: F5Networks/f5-adcaas-openstack
      # DEPLOY DOCS TO PRODUCTION
      - provider: s3
        skip_cleanup: true
        access_key_id: $AWS_ACCESS_KEY_ID
        secret_access_key: $AWS_SECRET_ACCESS_KEY
        bucket: $AWS_S3_BUCKET
        local_dir: docs/_build/html
        upload_dir: $AWS_DIR
        on:
          branch: master
          repo: F5Networks/f5-adcaas-openstack
      after_deploy:
         - aws cloudfront create-invalidation --distribution-id $AWS_DIST_ID --paths $AWS_DIR
